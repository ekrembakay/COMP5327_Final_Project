#def wordPattern2(pattern: str, str: str) -> bool:?$words = str.split()??$if len(pattern) != len(words):?$$return False?$match = {}?$used = set()?$for ch, wo in zip(pattern, words):?$$if (ch in match) != (wo in used):?$$$return False?$$elif ch not in match:?$$$match[ch] = wo?$$$used.add(wo)?$$elif match[ch] != wo:?$$$return False?$return True?
#def selfDividingNumbers2(left, right):?$res = []?$for i in range(left, right + 1):?$$if i < 10:?$$$res.append(i)?$$else:?$$$j = list(map(int, str(i)))?$$$if 0 not in j:?$$$$result = map(lambda y: "true" if i % y == 0 else "false", j)?$$$$if "false" not in result:?$$$$$div = True?$$$$else:?$$$$$div = False?$$$$if div == True:?$$$$$res.append(i)?$return res?
#def countBits2(num):?$result = []?$for n in range(num + 1):?$$result.append(int(bin(n)[2:].count('1')))?$return result?
#def sortedSquares2(A):?$for i in range(len(A)):?$$A[i] *= A[i]?$A.sort()?$return A?
#def firstUniqChar2(s):?$tmp = list(s)?$for i in range(len(tmp)):?$$if tmp.count(tmp[i]) == 1:?$$$return i?$return -1?
#def singleNumber2(nums):?$hash_table = defaultdict(int)?$for i in nums:?$$hash_table[i] += 1?$?$for i in hash_table:?$$if hash_table[i] == 1:?$$$return i?
#def numberOfArithmeticSlices2(A):?$dp = [0] * len(A)?$s = 0?$for i in range(2, len(A)):?$$if A[i] - A[i - 1] == A[i - 1] - A[i - 2]:?$$$dp[i] = 1 + dp[i - 1]?$$$s += dp[i]?$return s?
#def wiggleMaxLength2(A):?$stack = [A[0]]?$for i in range(1, len(A)):?$$if A[i] == stack[-1]:?$$$continue?$$if len(stack) < 2:?$$$stack.append(A[i])?$$$continue?$$if A[i] > stack[-1] > stack[-2]:?$$$x = max(A[i], stack[-1])?$$$stack.pop()?$$$stack.append(x)?$$elif A[i] < stack[-1] < stack[-2]:?$$$x = min(A[i], stack[-1])?$$$stack.pop()?$$$stack.append(x)?$$else:?$$$stack.append(A[i])?$return len(stack)?
#def maxArea2(A):?$max_area = 0?$left, right = 0, len(A) - 1?$while left < right:?$$max_area = max(max_area, min(A[left], A[right]) * (right - left))?$$if A[left] <= A[right]:?$$$left += 1?$$else:?$$$right -= 1?$return max_area?
#def characterReplacement2(s, k):?$count = {}?$for key in list(s):?$$if key not in count:?$$$count[key] = 0?$best = i = 0?$for j in range(len(s)):?$$count[s[j]] += 1?$$best = max(best, count[s[j]])?$$if best + k < j - i + 1:?$$$count[s[i]] -= 1?$$$i += 1?$return len(s) - i?
#def rotate2(nums, k):?$n = len(nums)?$a = [0] * n?$for i in range(n):?$$a[(i + k) % n] = nums[i]?$nums[:] = a?
#def prevPermOpt12(A):?$t, flag = A[-1], 0?$for i in range(len(A) - 1, -1, -1):?$$if A[i] > t:?$$$flag, l = 1, i?$$$break?$$else:?$$$temp = A[i]?$if not flag:?$$return A?$r = l + 1?$for i in range(r, len(A)):?$$if A[r] < A[i] < A[l]:?$$$r = i?$A[l],A[r] = A[r], A[l]?$return A?
#def maximumProduct2(nums):?$nums.sort()?$m1 = nums[-1] * nums[-2] * nums[-3]?$m2 = nums[-1] * nums[0] * nums[1]?$maximum = max(m1,m2)?$return maximum?
#def countPrimes2(n):?$if n < 2:?$$return 0?$s = [1] * n?$s[0] = s[1] = 0?$for i in range(2, int(n ** 0.5) + 1):?$$if s[i] == 1:?$$$s[i * i:n:i] = [0] * int((n - i * i - 1) / i + 1)?$return sum(s)?
#def find_minimum2(arr):?$min = arr[0][0]?$for i in range(len(arr)):?$$arr[i].sort()?$$if min > arr[i][0]:?$$$min = arr[i][0]?
#def search_duplicate_dic(arr):?$values = {}?$duplicate_list = []?$for i in range(len(arr)):?$$if arr[i] not in values:?$$$values[arr[i]] = 1?$$else:?$$$values[arr[i]] += 1?$$$if arr[i] not in duplicate_list:?$$$$duplicate_list.append(arr[i])?
#def removeElement2(nums, value):?$tail = 0?$for i in range(len(nums)):?$$if nums[i] != value:?$$$nums[tail] = nums[i]?$$$tail += 1?$return tail?
#def findUnsortedSubarray2(nums):?$lst = sorted(nums)?$i = 0?$n = len(nums)?$j = n - 1?$while i <= j:?$$if nums[i] == lst[i]:?$$$i += 1?$$else:?$$$if nums[j] == lst[j]:?$$$$j -= 1?$$$else:?$$$$break?$return j + 1 - i?
#def removeNb2(n):?$retArr = []?$j = 0?$sumN = (n * (n+1))/2?$for i in range(1, n):?$j = int((sumN - i) / (i + 1))?$if j < n and i * j == ((sumN - j) - i):?$$retArr.append([i, j])?$return retArr?
#def containsDuplicate2(nums):?$hashNum = {}?$for i in nums:?$$if i not in hashNum:?$$$hashNum[i] = 1?$$else:?$$$return True?$return False?
#def twoSum2(nums, target):?$temp = {}?$for i in range(len(nums)):?$$if nums[i] not in temp:?$$$temp[nums[i]] = i?$$if target - nums[i] in temp.keys() and temp[target - nums[i]] != i:?$$$return [temp[target - nums[i]], i]?$$else:?$$$if target - nums[i] in temp.keys() and temp[target - nums[i]] != i:?$$$$return [temp[target - nums[i]], i]?
#def sortColors2(nums):?$pos = 0?$for i in range(len(nums)):?$$if nums[pos] == 0:?$$$nums.insert(0, nums.pop(pos))?$$elif nums[pos] == 2:?$$$nums.append(nums.pop(pos))?$$$pos -= 1?$$pos += 1?$return nums?
#def majorityElement2(nums):?$count = 0?$candidate = None?$for num in nums:?$$if count == 0:?$$$candidate = num?$$count += (1 if num == candidate else -1)?$return candidate?
#def maxSubArray2(nums):?$current_subarray = max_subarray = nums[0]?$for num in nums[1:]:?$$current_subarray = max(num, current_subarray + num)?$$max_subarray = max(max_subarray, current_subarray)?$return max_subarray?
#def lengthOfLongestSubstring2(s):?$i = 0?$ans = 0?$acct_c = {}?$for j in range(len(s)):?$$if s[j] in acct_c:?$$$i = max(i, acct_c[s[j]] + 1)?$$ans = max(ans, j - i + 1)?$$acct_c[s[j]] = j?$return ans?
#def countNumbersWithUniqueDigits2(n):?$if n == 0:?$$return 1?$g, h = 10, 9?$for i in range(n - 1):?$$g += 9 * h?$$h *= (8 - i)?$return g?
#def convert2(s, numRows):?$if numRows==1:?$$return s ?$iter_capacity = 2*numRows-2?$iter_col_num = numRows-1?$min_iter_num = len(s)//iter_capacity + (1 if len(s)%iter_capacity!=0 else 0)?$col_num_need = min_iter_num*iter_col_num?$matrix = [["" for _ in range(col_num_need)] for _ in range(numRows)]?$direction = 1 # 1 represent down , 0 represent up?$row_index, col_index = 0, 0?$for i, c in enumerate(list(s)):?$$matrix[row_index][col_index] = c ?$$if row_index + 1 ==numRows: # hit bottom line ?$$$direction = 0 ?$$elif row_index == 0:?$$$direction = 1?$$if direction == 1:?$$$row_index += 1 ?$$elif direction==0:?$$$row_index -= 1?$$$col_index += 1?$result = ""$$?$for row in matrix:?$$result += "".join(row)?$return result?
#def getHint2(secret, guess):?$bull, cow, dic = 0, 0, {}?$for i in range(len(secret)):?$$s, g = secret[i], guess[i]?$$if s == g:?$$$bull += 1?$$else:?$$$if s not in dic:?$$$$dic[s] = [0, 0]?$$$if g not in dic:?$$$$dic[g] = [0, 0]?$$$dic[s][0] += 1?$$$dic[g][1] += 1?$for key, val in dic.items():?$$cow += min(val)?$return str(bull) + "A" + str(cow) + "B"?
#def canCompleteCircuit2(gas, cost):?$start = diff = tank = 0?$for i in range(len(gas)):?$$tank += gas[i] - cost[i]?$$if tank < 0:?$$$start = i + 1?$$$diff += tank?$$$tank = 0?$if tank + diff >= 0:?$$return start?$return -1?
#def generate2(numRows):?$res = [[1]]?$for i in range(1, numRows):?$$res.append(list(map(lambda x, y: x + y, [0] + res[-1], res[-1] + [0])))?$return res if numRows else []?
