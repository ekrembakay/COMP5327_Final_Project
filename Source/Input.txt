#def wordPattern(pattern,str):?$words = str.split()??$if len(pattern) != len(words):?$$return False?$for i in range(len(pattern)):?$$for j in range(i + 1, len(pattern)):?$$$if (pattern[j] == pattern[i]) != (words[j] == words[i]):?$$$$return False?$return True?
#def selfDividingNumbers(left, right):?$res = []?$for i in range(left, right+1):?$$for char in str(i):?$$$if int(char)==0 or i % int(char)!=0:?$$$$break?$$else:?$$$res.append(i)?$return res?
#def countBits(num):?$result = [0 for _ in range(num + 1)]?$for i in range(num + 1):?$$for j in str(bin(i))[2:]:?$$$if j == '1':?$$$$result[i] += 1?$return result?
#def sortedSquares(A):?$for i in range(len(A)):?$$A[i] = pow(A[i], 2)??$for i in range(len(A)-1):?$$currVal = A[i]?$$index = i + 1?$$for j in range(index, len(A)):?$$$if A[j] < currVal:?$$$$index = j?$$$$currVal = A[j]?$$if A[i] > A[index]:?$$$temp = A[index]?$$$A[index] = A[i]?$$$A[i] = temp?$return A?
#def firstUniqChar(s):?$for i in range(len(s)):?$$a = True?$$for j in range(len(s)):?$$$if s[i] == s[j] and i != j:?$$$$a = False?$$$$break?$$if a:?$$$return i?$return -1?
#def numberOfArithmeticSlices(A):?$cnt =0?$for i in range(len(A)-1):?$$ap =A[i]-A[i+1]?$$temp=A[i]?$$for j in range(i+1, len(A)):?$$$if temp-A[j]!=ap:?$$$$break?$$$if j>= i+2:?$$$$cnt+=1?$$$temp =A[j]?$return cnt?
#def wiggleMaxLength(A):?$n = len(A)?$ans = 1?$DP = [[1] * n for _ in range(2)]?$for i in range(1, n):?$$for j in range(i):?$$$if A[i] > A[j]:?$$$$DP[1][i] = max(DP[1][i], DP[0][j] + 1)?$$$$ans = max(ans, DP[1][i])?$$$elif A[i] < A[j]:?$$$$DP[0][i] = max(DP[0][i], DP[1][j] + 1)?$$$$ans = max(ans, DP[0][i])?$return ans?
#def maxArea(A):?$area = 0?$for i in range(len(A)):?$$for j in range(len(A)):?$$$area = max(area, min(A[i], A[j]) * (j - i))?$return area?
#def characterReplacement(s, k):?$if len(s) == 0:?$$return 0?$ret = 1?$mostFreqNumCount = 0?$for i in range(len(s)):?$$chars_cnt = [0] * 26?$$for j in range(i, len(s)):?$$$chars_cnt[ord(s[j])-65] += 1?$$$mostFreqNumCount = max(chars_cnt[ord(s[j])-65], mostFreqNumCount)?$$$lenght = j - i + 1?$$$if lenght - mostFreqNumCount > k:?$$$$chars_cnt[ord(s[i])-65] -= 1?$$$$continue?$$$ret = max(ret, lenght)?$return ret?
#def prevPermOpt1(A):?$if A==[] or len(A)==1:?$$return A?$for i in range(len(A)-2,0,-1):?$$maxLessThanCurr = -1?$$nextMaxPos = -1?$$for j in range(i+1, len(A)):?$$$if A[j]<A[i] and A[j]>maxLessThanCurr:?$$$$maxLessThanCurr = A[j]?$$$$nextMaxPos = j?$$if nextMaxPos!=-1:?$$$t = A[i]?$$$A[i] = A[nextMaxPos]?$$$A[nextMaxPos] = t?$$$return A?$return A?
#def maximumProduct(nums):?$maximum = nums[0]?$for i in range(len(nums)-2):?$$for j in range(i+1, len(nums)-1):?$$$for k in range(j+1, len(nums)):?$$$$maximum = max(maximum,nums[i]*nums[j]*nums[k])?$return maximum?
#def countPrimes(n):?$if (n < 2):?$$return 0?$final = []?$for x in range(2, n):?$$flag = 0?$$for y in range(2, x):?$$$if (x % y == 0):?$$$$flag = 1?$$$$break?$$if (flag == 0):?$$$final.append(x)?$return len(final)?
#def find_minimum(arr):?$min = arr[0][0]?$for i in arr:?$$for j in i:?$$If min > j:?$$$min = j?
#def search_duplicate(arr):?$duplicate_list = []?$for i in range(len(arr)):?$$for j in range(i+1, len(arr)):?$$$if (arr[i] == arr[j]) and (arr[j] not in duplicate_list):?$$$$duplicate_list.append(arr[i])?
#def removeNb (n):?$if n==1: return??$sum = (n * (n+1))/2??$retArr = []?$for i in range(n):?$for j in range(n):?$$if j != i and i * j == ((sum - j) - i):?$$ retArr.append([i, j])?$retArr.sort()?$return retArr?
#def containsDuplicate(nums):?$for i in range(len(nums)-1):?$$for j in range(i+1, len(nums)):?$$$if (nums[j] == nums[i]):?$$$$return True?$return False?
#def twoSum(nums, target):?$for i in range(len(nums)):?$$for j in range(i+1, len(nums)):?$$$if nums[i] + nums[j] == target:?$$$$return [i, j]?
#def sortColors(nums):?$for i in range(len(nums) - 1):?$$for j in range(0, len(nums) - i - 1):?$$$if nums[j] > nums[j + 1]:?$$$$nums[j], nums[j + 1] = nums[j + 1], nums[j]?$return nums?
#def maxSubArray(nums):?$max_subarray = nums[0]?$for i in range(len(nums)):?$$current_subarray = 0?$$for j in range(i, len(nums)):?$$$current_subarray += nums[j]?$$$max_subarray = max(max_subarray, current_subarray)?$return max_subarray?
#def lengthOfLongestSubstring(s):?$if len(s) < 2: return len(s)?$result = 0?$for i in range(len(s)):?$$temp = s[i]?$$for j in range(i + 1, len(s)):?$$$if s[j] not in temp:?$$$$temp += s[j]?$$$else:?$$$$result = max(result, len(temp))?$$$$break?$$result = max(result, len(temp))?$return result?
#def countNumbersWithUniqueDigits(n):?$f = [0] * (n + 1)?$f[0] = 1?$for i in range(1, n + 1):?$$curt = 9?$$d = 9?$$for _ in range(i - 1):?$$$curt *= d?$$$d -= 1?$$f[i] = f[i - 1] + curt?$return f[n]?
#def getHint(secret, guess):?$bull, cow = 0, 0?$used= []?$for i in range(len(guess)):?$$si = secret[i]?$$gi = guess[i]?$$if si == gi:?$$$bull += 1?$$$used.append(True)?$$else:?$$$used.append(False)?$for i in range(len(guess)):?$$gi = guess[i]?$$if secret[i] == gi:?$$$continue?$$for j in range(len(guess)):?$$$if secret[j] == gi and not used[j]:?$$$$cow += 1?$$$$used[j] = True?$$$$break;?$return str(bull) + "A" + str(cow) + "B"?
#def canCompleteCircuit(gas, cost):?$n = len(gas)?$min_cost = min(cost)?$max_gas = max(gas)?$start_pos_list = []?$for i, c in enumerate(cost):?$$if c == min_cost or gas[i] == max_gas:?$$$start_pos_list.append(i)?$for start_pos in start_pos_list:?$$isComplete = True?$$quantity = 0?$$pos = start_pos?$$for i in range(n):?$$$quantity += gas[pos] - cost[pos]?$$$pos = (pos + 1) % n?$$$if quantity < 0:?$$$$isComplete = False?$$$$break?$$if isComplete:?$$$return start_pos?$return -1?
#def generate(self, numRows):?$num = [[1], [1, 1]]?$if numRows == 1:?$$return num[0]?$elif numRows == 2:?$$return num?$elif numRows == 0:?$$return []?$$?$row = []?$for i in range(2, numRows):?$$for j in range(i - 1):?$$$row.append(sum(num[-1][j:j + 2]))?$$num.append([1] + row + [1])?$$row = []??$return num?
